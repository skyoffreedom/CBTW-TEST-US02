{
	"info": {
		"_postman_id": "ee0da6fe-09d0-408f-bb4d-18d61c59f0fd",
		"name": "CBTW-TEST-US02",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13208324"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\": \"eve.holt@reqres.in\",\r\n\"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login Test\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"token\", jsonData.token);\r",
							"}\r",
							");\r",
							"\r",
							"pm.test(\"Token exists\", function () {\r",
							"    pm.expect(pm.environment.get(\"token\")).to.be.a(\"string\").that.is.not.empty; // Validate the token\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"email\": \"eve.holt@reqres.in\",\r\n\"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login without password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Token exists\", function () {\r",
							"    pm.expect(pm.environment.get(\"token\")).to.be.a(\"string\").that.is.not.empty; // Validate the token\r",
							"});\r",
							"\r",
							"pm.test(\"Login without password failed\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\", \"Missing password\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"email\": \"eve.holt@reqres.in\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login without username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Token exists\", function () {\r",
							"    pm.expect(pm.environment.get(\"token\")).to.be.a(\"string\").that.is.not.empty; // Validate the token\r",
							"});\r",
							"\r",
							"pm.test(\"Login without username failed\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\", \"Missing email or username\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"userData\", JSON.stringify(jsonData.data));\r",
							"}\r",
							");\r",
							"\r",
							"pm.test(\"User data exists\", function () {\r",
							"    pm.expect(pm.response.json().data).to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/2",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				},
				"description": "Based on AIS message that Guardian will provide lasted information as position (lat,long), heading, speed.."
			},
			"response": []
		},
		{
			"name": "Get User with valid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Retrieve user with valid ID\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.have.property(\"id\", 2); \r",
							"    pm.expect(jsonData.data).to.have.property(\"first_name\", \"Janet\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/2",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				},
				"description": "Based on AIS message that Guardian will provide lasted information as position (lat,long), heading, speed.."
			},
			"response": []
		},
		{
			"name": "Attempt to Retrieve Non-Existing User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Attempt to retrieve non-existing user\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.deep.equal({});\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/api/users/23",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				},
				"description": "Based on AIS message that Guardian will provide lasted information as position (lat,long), heading, speed.."
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful update of user information\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"name\", \"morpheus\");\r",
							"    pm.expect(jsonData).to.have.property(\"job\", \"zion resident\");\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"morpheus\",\r\n  \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/2",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non-exist user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Attempt to update a non-existing user\", function () {\r",
							"    pm.response.to.have.status(404); \r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.deep.equal({}); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"morpheus\",\r\n  \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/999",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update but missing field",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Attempt to update a non-existing user\", function () {\r",
							"    pm.response.to.have.status(400); \r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"error\"); \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/2",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	]
}